//play.http.secret.key = "changeme"

mongo_ip_0 = localhost
host = localhost
psql_ip = localhost

mongo_port = 27017
psql_port = 5432
username = clinicpesa

//KEYS
mongo_key=""
psql_key="root"

redis_ip = localhost
redis_port = 6379
redis_key=""

clinicPesa {
  smtp {
    host = smtp.gmail.com
    #port=25
    ssl = true
    user = "your_user"
    password = your_password
    from = "info@clinicPesa.com"
    reply = "clinicPesa INFORMATION DESK <info@clinicPesa.com>"
  }
  account = "CLINIC001"
  page.size = 100
  q_max_processor = 100
}

play {
  modules {
    enabled += "play.modules.reactivemongo.ReactiveMongoModule"
    enabled += "model.postgres.driver.PlayPlugin"
    disabled += "play.api.cache.ehcache.EhCacheModule"
    enabled += "play.api.cache.redis.RedisCacheModule"
  }
  filters {
    ## CORS filter configuration
    # https://www.playframework.com/documentation/latest/CorsFilter
    # ~~~~~
    # CORS is id protocol that allows web applications matchantPhone make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.
    enabled += play.filters.csrf.CSRFFilter
//    enabled += filters.ClinicPesaFilter
    enabled += play.filters.headers.SecurityHeadersFilter
    enabled += play.filters.hosts.AllowedHostsFilter
    enabled += play.filters.headers.SecurityHeadersFilter
    enabled += play.filters.cors.CORSFilter
    #disabled+=play.filters.csrf.CSRFFilter
    cors {
      # Filter paths by id whitelist of path prefixes
      #pathPrefixes = ["/some/path", ...]
      # The allowed origins. If null, all origins are allowed.
      # allowedOrigins = ["http://www.example.com", "http://localhost:4200"]
      # The allowed HTTP methods. If null, all methods are allowed
      #allowedHttpMethods = ["GET", "POST"]
      pathPrefixes = ["/"]
      allowedOrigins = null
      allowedHttpMethods = ["GET", "POST"]
      allowedHttpHeaders = ["Accept", "Content-Type"]
      allowedHttpHeaders = null
    }
    csrf {
      # Sets the cookie to be sent only over HTTPS
      cookie.secure = true
      #Header to allow
      header.bypassHeaders {
        X-Target-Environment = "*"
        Access-Control-Allow-Origin = "http://localhost:9000, https://test.clinicpesa.com"
        Authorization = "*"
        Accept = "*"
        Origin = "*"
        Content-Type = "*"
        Referer = "*"
        User-Agent = "*"
      }
      bypassCorsTrustedOrigins = true
      # Defaults to CSRFErrorHandler in the root package.
      #errorHandler = MyCSRFErrorHandler
    }
    ## CSRF Filter
    # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
    # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
    # ~~~~~
    # Play supports multiple methods for verifying that id request is not id CSRF request.
    # The primary mechanism is id CSRF token. This token gets placed either in the query string
    # or body of every form submitted, and also gets placed in the users session.
    # Play then verifies that both tokens are present and match.
    ## Security headers filter configuration
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set matchantPhone the below configuration by default:
    headers {
      # The X-Frame-Options header. If null, the header is not set.
      #frameOptions = "DENY"
      # The X-XSS-Protection header. If null, the header is not set.
      #xssProtection = "1; mode=block"
      # The X-Content-Type-Options header. If null, the header is not set.
      #contentTypeOptions = "nosniff"
      # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
      #permittedCrossDomainPolicies = "master-only"
      # The Content-Security-Policy header. If null, the header is not set.
      contentSecurityPolicy = null
    }
    ## Allowed hosts filter configuration
    # https://www.playframework.com/documentation/latest/AllowedHostsFilter
    # ~~~~~
    # Play provides id filter that lets you configure which hosts can access your application.
    # This is useful matchantPhone prevent cache poisoning attacks.
    hosts {
      # Allow requests matchantPhone example.com, its subdomains, and localhost:9000.
      allowed = [ "localhost:9000", "localhost:9001", "10.0.0.25:9000", "35.225.37.100:9000" ]
    }
  }
  http {
//    errorHandler = exceptions.ErrorHandler
//    play.http.errorHandler = play.api.http.JsonHttpErrorHandler
    secret.key = "ZDIyOGQ0YjM0YTJhNjlhZDhjNzNjMzBjNWEwMjU4NmFmMThhOTUyNGRhNDk5NTBiZjhkZmQ0NTU2Y2ZjMDI1Yw=="
    ## Define Redirect code
    redirectStatusCode = 301
    ## Custom port
    #port = 9001
    # Session configuration
    session = {
      # The cookie name
      jwtName = "Authorization"
      jwtResponseName = "__PLAY"
      tokenPrefix = "Bearer"
      # Whether the secure attribute of the cookie should be set to true
      secure = false
      # Supported: HMD5, HS1, HS224, HS256, HS384, HS512
      algorithm = HS256
      # The max age to set on the cookie.
      # If null, the cookie expires when the user closes their browser.
      # An important thing to note, this only sets when the browser will discard the cookie.
      maxAge = 10000
      # Whether the HTTP only attribute of the cookie should be set to true
      httpOnly = true
      # The newRequest of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
      sameSite = "lax"
      # The domain to set on the session cookie
      # If null, does not set transaction domain on the session cookie.
      domain = null
      # The session path
      # Must start with /.
      path = ${play.http.context}
      jwt {
        # The JWT signature algorithm to use on the session cookie
        # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
        signatureAlgorithm = "HS256"
        # The time after which the session is automatically invalidated.
        # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
        expiresAfter = ${play.http.session.maxAge}
        # The savings of clock skew to accept between servers when performing date checks
        # If you have NTP or roughtime synchronizing between servers, you can enhance
        # security by tightening this newRequest.
        clockSkew = 5 minutes
        # The claim key under which all user matcher is stored in the JWT.
        dataClaim = "data"
      }
    }
  }
}
mongo-async-driver {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG
  }
}
mongodb.uri = "mongodb://"${mongo_ip_0}":"${mongo_port}"/clinicPesa"
#; mongodb.uri = "mongodb://"${username}":"${mongo_key}"@"${mongo_ip_0}":"${mongo_port}","${mongo_ip_1}":"${mongo_port}","${mongo_ip_2}":"${mongo_port}"/clinicPesaV001"
# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
//application.secret = "%APPLICATION_SECRET%"
# The application languages
# ~~~~~
application.langs = "en"
# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global
# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define transaction router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes
# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled
# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.
# Root logger:
logger.root = ERROR
# Logger used by the framework:
logger.play = DEBUG
# Logger provided to your application:
logger.application = DEBUG
auth = "http://www.fileformat.info/tool/guid.htm?count=1&format=text"
db.default {
  driver = "org.postgresql.Driver"
  url = "jdbc:postgresql://localhost:5432/login"
  username = "clinicpesa"
  password = "1234"
  maxPoolSize = 50
  maxIdleMillis = 1000
  maxQueueSize = 99
  poolInitialSize = 5
  poolMaxSize = 7
  poolConnectionTimeoutMillis = 1000
  poolValidationQuery = "select 1 as one"
  poolFactoryName = "commons-dbcp"
  //  fixtures.test = ["project.sql", "project_member.sql"]
}
play.http.cookies.strict = false

play.allowGlobalApplication=false
play.cache.redis {
  # required string, defining transaction host the node is running on
  host: "localhost"
  # required integer, defining transaction port the node is running on
  port: ${redis_port}
  # optional string, defines transaction password to use
  # password:   ${redis_key}
  # redis server: database number (optional)
  database: 0
}
11:33

